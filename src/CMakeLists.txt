aux_source_directory(./testcase-lib testsrc)
aux_source_directory(./testtools-lib toolsrc)
aux_source_directory(./judge-lib judgesrc)

find_package(fmt CONFIG REQUIRED)
link_libraries(fmt::fmt-header-only)

set(Boost_USE_STATIC_LIBS ON)
include(Utility)
if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
	find_package(Boost CONFIG REQUIRED COMPONENTS stacktrace_windbg thread)
else()
	find_package(Boost CONFIG REQUIRED COMPONENTS stacktrace_backtracee thread)
endif()
add_library(system-lib STATIC ./system-lib/${CMAKE_SYSTEM_NAME}.cpp ./system-lib/common.cpp)
set_standard(system-lib)
if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
	target_link_libraries(system-lib rt)
endif()

add_library(testtools-lib STATIC ${toolsrc})
set_standard(testtools-lib)
target_link_libraries(testtools-lib)

add_library(testcase-lib STATIC ${testsrc})
set_standard(testcase-lib)
target_link_libraries(testcase-lib testtools-lib process-lib)

add_library(judge-lib STATIC ${judgesrc})
if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
	target_compile_definitions(judge-lib PUBLIC BOOST_STACKTRACE_USE_BACKTRACE)
	target_link_libraries(judge-lib PRIVATE Boost::stacktrace_backtrace system-lib)
else()
	target_link_libraries(judge-lib PRIVATE Boost::stacktrace_windbg system-lib)
endif()

function(add_target target_name src)
	add_executable(${target_name} ${src})
	set_standard(${target_name})
	install(TARGETS ${target_name} DESTINATION bin/)
endfunction()

add_target(single singletest.cpp)
target_link_libraries(single testcase-lib)
add_target(group grouptest.cpp)
target_link_libraries(group testcase-lib)
add_target(random randomtest.cpp)
target_link_libraries(random testcase-lib Boost::thread)
add_target(diff autodiff.cpp)
target_link_libraries(diff testtools-lib system-lib)

add_subdirectory(init-lib)
add_executable(init init.cpp)
set_standard(init)
target_link_libraries(init configs)
install(TARGETS init DESTINATION .)
